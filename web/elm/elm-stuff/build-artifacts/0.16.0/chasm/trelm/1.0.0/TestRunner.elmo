Elm.TestRunner = Elm.TestRunner || {};
Elm.TestRunner.make = function (_elm) {
   "use strict";
   _elm.TestRunner = _elm.TestRunner || {};
   if (_elm.TestRunner.values) return _elm.TestRunner.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var testLists = Elm.Native.Port.make(_elm).inboundSignal("testLists",
   "TestRunner.Model",
   function (v) {
      return typeof v === "object" && v instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.map(function (v) {
         return typeof v === "object" && "id" in v && "test" in v && "description" in v && "status" in v ? {_: {}
                                                                                                           ,id: typeof v.id === "number" && isFinite(v.id) && Math.floor(v.id) === v.id ? v.id : _U.badPort("an integer",
                                                                                                           v.id)
                                                                                                           ,test: typeof v.test === "string" || typeof v.test === "object" && v.test instanceof String ? v.test : _U.badPort("a string",
                                                                                                           v.test)
                                                                                                           ,description: typeof v.description === "string" || typeof v.description === "object" && v.description instanceof String ? v.description : _U.badPort("a string",
                                                                                                           v.description)
                                                                                                           ,status: typeof v.status === "string" || typeof v.status === "object" && v.status instanceof String ? v.status : _U.badPort("a string",
                                                                                                           v.status)} : _U.badPort("an object with fields `id`, `test`, `description`, `status`",
         v);
      })) : _U.badPort("an array",v);
   });
   var Reset = {ctor: "Reset"};
   var RunAllTests = {ctor: "RunAllTests"};
   var RunTest = function (a) {    return {ctor: "RunTest",_0: a};};
   var SetTests = function (a) {    return {ctor: "SetTests",_0: a};};
   var incomingActions = A2($Signal.map,SetTests,testLists);
   var NoOp = {ctor: "NoOp"};
   var testTotals = function (tests) {
      var incrementTotals = F2(function (test,totals) {
         var _p0 = test.status;
         switch (_p0)
         {case "RUNNING": return _U.update(totals,{running: totals.running + 1});
            case "FAILED": return _U.update(totals,{failed: totals.failed + 1});
            case "PASSED": return _U.update(totals,{passed: totals.passed + 1});
            default: return _U.update(totals,{pending: totals.pending + 1});}
      });
      return A3($List.foldl,incrementTotals,{running: 0,failed: 0,passed: 0,pending: 0},tests);
   };
   var totalsFoot = function (tests) {
      var totals = testTotals(tests);
      return A2($Html.tr,
      _U.list([$Html$Attributes.$class("totals")]),
      _U.list([A2($Html.td,
      _U.list([$Html$Attributes.colspan(3)]),
      _U.list([A2($Html.span,
              _U.list([$Html$Attributes.$class("passed")]),
              _U.list([$Html.text($String.concat(_U.list(["Passed: ",$Basics.toString(totals.passed)])))]))
              ,A2($Html.span,
              _U.list([$Html$Attributes.$class("failed")]),
              _U.list([$Html.text($String.concat(_U.list(["Failed: ",$Basics.toString(totals.failed)])))]))
              ,A2($Html.span,
              _U.list([$Html$Attributes.$class("running")]),
              _U.list([$Html.text($String.concat(_U.list(["Running: ",$Basics.toString(totals.running)])))]))
              ,A2($Html.span,
              _U.list([$Html$Attributes.$class("pending")]),
              _U.list([$Html.text($String.concat(_U.list(["Pending: ",$Basics.toString(totals.pending)])))]))]))]));
   };
   var Totals = F4(function (a,b,c,d) {    return {running: a,failed: b,passed: c,pending: d};});
   var pageHeader = function (address) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.button,
              _U.list([$Html$Attributes.$class("btn btn-sm btn-warning pull-right"),A2($Html$Events.onClick,address,Reset)]),
              _U.list([$Html.text("Reset Tests")]))
              ,A2($Html.button,
              _U.list([$Html$Attributes.$class("btn btn-sm btn-info pull-right"),A2($Html$Events.onClick,address,RunAllTests)]),
              _U.list([$Html.text("Run All Tests")]))
              ,A2($Html.h1,_U.list([]),_U.list([$Html.text("Test Runner")]))]));
   };
   var classify = function (status) {
      var _p1 = status;
      switch (_p1)
      {case "RUNNING": return "warning";
         case "PASSED": return "success";
         case "FAILED": return "danger";
         default: return "";}
   };
   var testRow = F2(function (address,test) {
      return A2($Html.tr,
      _U.list([$Html$Attributes.$class(classify(test.status))]),
      _U.list([A2($Html.td,
              _U.list([$Html$Attributes.$class("controls")]),
              _U.list([A2($Html.button,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "btn btn-sm btn-info",_1: true}
                                                          ,{ctor: "_Tuple2",_0: "disabled",_1: _U.eq(test.status,"RUNNING")}]))
                      ,A2($Html$Events.onClick,address,RunTest(test.id))]),
              _U.list([$Html.text("Run")]))]))
              ,A2($Html.td,_U.list([$Html$Attributes.$class("description")]),_U.list([$Html.text(test.description)]))
              ,A2($Html.td,_U.list([$Html$Attributes.$class("test")]),_U.list([$Html.text(test.test)]))
              ,A2($Html.td,_U.list([$Html$Attributes.$class("status")]),_U.list([$Html.text(test.status)]))]));
   });
   var testRows = F2(function (address,tests) {    return A2($List.map,testRow(address),tests);});
   var testTable = F2(function (address,model) {
      return A2($Html.table,
      _U.list([$Html$Attributes.$class("table table-striped table-bordered table-hover tests")]),
      _U.list([A2($Html.thead,
              _U.list([]),
              _U.list([A2($Html.tr,
              _U.list([]),
              _U.list([A2($Html.th,_U.list([$Html$Attributes.$class("controls")]),_U.list([]))
                      ,A2($Html.th,_U.list([$Html$Attributes.$class("description")]),_U.list([$Html.text("Description")]))
                      ,A2($Html.th,_U.list([$Html$Attributes.$class("test")]),_U.list([$Html.text("Test")]))
                      ,A2($Html.th,_U.list([$Html$Attributes.$class("status")]),_U.list([$Html.text("Status")]))]))]))
              ,A2($Html.tbody,_U.list([]),A2(testRows,address,model))
              ,A2($Html.tfoot,_U.list([]),_U.list([totalsFoot(model)]))]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container")]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("row")]),
              _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("col-xs-12")]),_U.list([pageHeader(address)]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("row")]),
              _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("col-xs-12")]),_U.list([A2(testTable,address,model)]))]))]));
   });
   var init = {ctor: "_Tuple2",_0: _U.list([]),_1: $Effects.none};
   var Test = F4(function (a,b,c,d) {    return {id: a,test: b,description: c,status: d};});
   var updateTest = function (test) {    return _U.update(test,{status: _U.eq(A2($Basics._op["%"],test.id,3),2) ? "FAILED" : "PASSED"});};
   var runAllTests = function (model) {    return A2($List.map,updateTest,model);};
   var runOneTest = F2(function (model,id) {
      var runTest = F2(function (id,test) {    return _U.eq(test.id,id) ? updateTest(test) : test;});
      return A2($List.map,runTest(id),model);
   });
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "SetTests": return {ctor: "_Tuple2",_0: _p2._0,_1: $Effects.none};
         case "RunTest": return {ctor: "_Tuple2",_0: A2(runOneTest,model,_p2._0),_1: $Effects.none};
         case "RunAllTests": return {ctor: "_Tuple2",_0: runAllTests(model),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: $Basics.fst(init),_1: $Effects.none};}
   });
   var app = $StartApp.start({init: init,update: update,view: view,inputs: _U.list([incomingActions])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   var Failed = {ctor: "Failed"};
   var Passed = {ctor: "Passed"};
   var Running = {ctor: "Running"};
   var Pending = {ctor: "Pending"};
   return _elm.TestRunner.values = {_op: _op
                                   ,Pending: Pending
                                   ,Running: Running
                                   ,Passed: Passed
                                   ,Failed: Failed
                                   ,updateTest: updateTest
                                   ,runAllTests: runAllTests
                                   ,runOneTest: runOneTest
                                   ,Test: Test
                                   ,init: init
                                   ,classify: classify
                                   ,pageHeader: pageHeader
                                   ,testRow: testRow
                                   ,testRows: testRows
                                   ,Totals: Totals
                                   ,testTotals: testTotals
                                   ,totalsFoot: totalsFoot
                                   ,testTable: testTable
                                   ,view: view
                                   ,NoOp: NoOp
                                   ,SetTests: SetTests
                                   ,RunTest: RunTest
                                   ,RunAllTests: RunAllTests
                                   ,Reset: Reset
                                   ,update: update
                                   ,app: app
                                   ,main: main
                                   ,incomingActions: incomingActions};
};